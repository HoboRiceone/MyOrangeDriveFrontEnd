{"remainingRequest":"/home/hobo/code/odd6871/node_modules/babel-loader/lib/index.js!/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue","mtime":1587468442985},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFNwYXJrTUQ1IGZyb20gJ3NwYXJrLW1kNSc7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBmb2xkZXJpdGVtIGZyb20gIi4vRmlsZWl0ZW1zL2ZvbGRlcml0ZW0iOwppbXBvcnQgZmlsZWl0ZW0gZnJvbSAiLi9GaWxlaXRlbXMvZmlsZWl0ZW0iOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0ZpbGVtYW5hZ2VtZW50JywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZmlsZUxpc3Q6IFt7fV0sCiAgICAgIGZvbGRlcml0ZW1zOiBbXSwKICAgICAgZmlsZWl0ZW1zOiBbXSwKICAgICAgY3VycmVudF9kaXJfaWQ6IC0xLAogICAgICBjdXJyZW50X2Rpcl9uYW1lOiAnQWxsIGZpbGVzJwogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIGZvbGRlcml0ZW06IGZvbGRlcml0ZW0sCiAgICBmaWxlaXRlbTogZmlsZWl0ZW0KICB9LAogIG1ldGhvZHM6IHsKICAgIGZsdXNoRGlyOiBmdW5jdGlvbiBmbHVzaERpcihuZXdEaXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuY3VycmVudF9kaXJfaWQgPSBuZXdEaXIuZGlySUQ7CiAgICAgIHRoaXMuZm9sZGVyaXRlbXMgPSBbXTsKICAgICAgdGhpcy5maWxlaXRlbXMgPSBbXTsKICAgICAgdGhpcy4kYXBpLmdldCgnL2FwaS9kaXJzdGVzdCcsIHsKICAgICAgICAneC1hdXRoLXRva2VuJzogdGhpcy5Db21tb24ueHRva2VuCiAgICAgIH0sIHsKICAgICAgICBpZDogdGhpcy5jdXJyZW50X2Rpcl9pZCwKICAgICAgICAvLydqb2hud2ljazEyM0BnbWFpbC5jb20nLAogICAgICAgIG9ubHlfZGlyOiBmYWxzZSAvLycxMjMxMjM0JwoKICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgIHZhciBmb2xkZXJzbGlzdDsKICAgICAgICAgIHZhciBmaWxlc2xpc3Q7CiAgICAgICAgICBfdGhpcy5jdXJyZW50X2Rpcl9uYW1lID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5uYW1lICsgIi8iOwogICAgICAgICAgZm9sZGVyc2xpc3QgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLmRpcnM7CiAgICAgICAgICBmaWxlc2xpc3QgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLmZpbGVzOwoKICAgICAgICAgIGZvciAodmFyIGtleWZvbGRlciBpbiBmb2xkZXJzbGlzdCkgewogICAgICAgICAgICBfdGhpcy5mb2xkZXJpdGVtcy5wdXNoKHsKICAgICAgICAgICAgICBnZXRuYW1lOiBmb2xkZXJzbGlzdFtrZXlmb2xkZXJdLm5hbWUsCiAgICAgICAgICAgICAgZ2V0aWQ6IGZvbGRlcnNsaXN0W2tleWZvbGRlcl0uaWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yICh2YXIga2V5ZmlsZSBpbiBmaWxlc2xpc3QpIHsKICAgICAgICAgICAgX3RoaXMuZmlsZWl0ZW1zLnB1c2goewogICAgICAgICAgICAgIGdldG5hbWU6IGZpbGVzbGlzdFtrZXlmaWxlXS5uYW1lCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDQwMCkgewogICAgICAgICAgYWxlcnQocmVzcG9uc2UuZGF0YS5tc2cpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydCgiTmV0d29yayBFcnJvciIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQocmVzKSB7CiAgICAgIHZhciBmaWxlID0gcmVzLmZpbGU7IC8v5rOo5oSP77ya55u05o6l5LiK5LygZmlsZeaWh+S7tu+8jOS4jeimgeeUqEZvcm1EYXRh5a+56LGh55qE5b2i5byP5LygCgogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScKICAgICAgICB9CiAgICAgIH07IC8v5LuO5o6l5Y+j6I635Y+WcHJlc2lnbmVkIHVybAoKICAgICAgdmFyIHByZXNpZ25lZFVybCA9ICdodHRwczovL215LWJ1Y2tldC1nbGFpLTAxLnMzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tL2ZkMT9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1EYXRlPTIwMjAwNDE4VDE1MTczM1omWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JlgtQW16LUV4cGlyZXM9MjUxOTkmWC1BbXotQ3JlZGVudGlhbD1BS0lBVUlIQVlDWFJaM1JEVE1UMyUyRjIwMjAwNDE4JTJGdXMtZWFzdC0yJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotU2lnbmF0dXJlPTM5NmMwZjMwYWFlM2ZlZWViMThjNWZjMjNjNzY5OWVjZjQyYmI5YjVhMmNhYzM4ZTE1MGNhNjg3OTNlMGFlMjAnOyAvL+mcgOimgeeUqHB1dOaWueazleS4iuS8oO+8jHBvc3TkvJrmiqU0MDXvvIxhd3Plrpjmlrnop4TlrprmmK9wdXTmlrnms5UKICAgICAgLy8gYXhpb3MucHV0KHByZXNpZ25lZFVybCwgZmlsZSwgY29uZmlnKQogICAgICAvLyAgICAgLnRoZW4ocmVzMSA9PiB7CiAgICAgIC8vICAgICAgICAgaWYgKHJlczEuc3RhdHVzID09IDIwMCkgewogICAgICAvLyAgICAgICAgICAgY29uc29sZS5sb2cocmVzMSk7CiAgICAgIC8vICAgICAgICAgfQogICAgICAvLyAgICAgfSk7CgogICAgICB0aGlzLmdlbmVyYXRvckZpbGVNZDUoZmlsZSk7CiAgICB9LAogICAgZmlsZWRvd25sb2FkOiBmdW5jdGlvbiBmaWxlZG93bmxvYWQoKSB7CiAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICBsaW5rLmRvd25sb2FkID0gJ3RleHQnOwogICAgICBsaW5rLmhyZWYgPSAiaHR0cHM6Ly9teS1idWNrZXQtZ2xhaS0wMS5zMy51cy1lYXN0LTIuYW1hem9uYXdzLmNvbS9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQV8zNDU2MzI0P3Jlc3BvbnNlLWNvbnRlbnQtZGlzcG9zaXRpb249YXR0YWNobWVudCUzQmZpbGVuYW1lJTNEaGVsbG8ta2l0dHkucGRmJlgtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LURhdGU9MjAyMDA0MThUMTQ1NzA2WiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmWC1BbXotRXhwaXJlcz02MDQ3OTkmWC1BbXotQ3JlZGVudGlhbD1BS0lBVUlIQVlDWFJaM1JEVE1UMyUyRjIwMjAwNDE4JTJGdXMtZWFzdC0yJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotU2lnbmF0dXJlPWZlMWM3M2EyN2Y2ZGU5MzQwZTA1ZmUxOTgyZTE2MjQxZDU2YzY4MDY1YTgwN2RmZGE5ODgyOTc2ZmRmZmJkZWYiOwogICAgICBsaW5rLmNsaWNrKCk7CiAgICB9LAogICAgZ2VuZXJhdG9yRmlsZU1kNTogZnVuY3Rpb24gZ2VuZXJhdG9yRmlsZU1kNShmaWxlKSB7CiAgICAgIC8qKgogICAgICAgICog55Sf5oiQTUQ1CiAgICAgICAgKi8KICAgICAgdmFyIGJsb2JTbGljZSA9IEZpbGUucHJvdG90eXBlLnNsaWNlIHx8IEZpbGUucHJvdG90eXBlLm1velNsaWNlIHx8IEZpbGUucHJvdG90eXBlLndlYmtpdFNsaWNlOyAvLyBmaWxlID0gdGhpcy5maWxlc1swXSwKCiAgICAgIHZhciBjaHVua1NpemUgPSAyMDk3MTUyOyAvLyBSZWFkIGluIGNodW5rcyBvZiAyTUIKCiAgICAgIHZhciBjaHVua3MgPSBNYXRoLmNlaWwoZmlsZS5zaXplIC8gY2h1bmtTaXplKTsKICAgICAgdmFyIGN1cnJlbnRDaHVuayA9IDA7CiAgICAgIHZhciBzcGFyayA9IG5ldyBTcGFya01ENS5BcnJheUJ1ZmZlcigpOwogICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlYWQgY2h1bmsgbnInLCBjdXJyZW50Q2h1bmsgKyAxLCAnb2YnLCBjaHVua3MpCiAgICAgICAgc3BhcmsuYXBwZW5kKGUudGFyZ2V0LnJlc3VsdCk7IC8vIEFwcGVuZCBhcnJheSBidWZmZXIKCiAgICAgICAgY3VycmVudENodW5rKys7CgogICAgICAgIGlmIChjdXJyZW50Q2h1bmsgPCBjaHVua3MpIHsKICAgICAgICAgIGxvYWROZXh0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGNvbnNvbGUuaW5mbygnY29tcHV0ZWQgaGFzaCcsIHNwYXJrLmVuZCgpKSAgLy8gc3BhcmsuZW5kKCk6IOaWh+S7tiBNRDXlgLznlJ/miJDlrozmiJAKICAgICAgICAgIGNvbnNvbGUubG9nKHNwYXJrLmVuZCgpKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc29sZS53YXJuKCdmaWxlUmVhZGVyLm9uZXJyb3IgaXMgZXJyb3InKTsKICAgICAgfTsKCiAgICAgIGZ1bmN0aW9uIGxvYWROZXh0KCkgewogICAgICAgIHZhciBzdGFydCA9IGN1cnJlbnRDaHVuayAqIGNodW5rU2l6ZSwKICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBjaHVua1NpemUgPj0gZmlsZS5zaXplID8gZmlsZS5zaXplIDogc3RhcnQgKyBjaHVua1NpemU7CiAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iU2xpY2UuY2FsbChmaWxlLCBzdGFydCwgZW5kKSk7CiAgICAgIH0KCiAgICAgIGxvYWROZXh0KCk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy4kYnVzLm9uKCd1cGRhdGVEaXJJRCcsIHRoaXMuZmx1c2hEaXIpOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIHRoaXMuJHJlZnMuc2V0aGVpZ2h0LnN0eWxlLmhlaWdodCA9IHRoaXMuJHJlZnMuZ2V0aGVpZ2h0Lm9mZnNldEhlaWdodCAqIDAuODQgKyAncHgnOwogICAgdGhpcy4kYXBpLmdldCgnL2FwaS9kaXJzJywgewogICAgICAneC1hdXRoLXRva2VuJzogdGhpcy5Db21tb24ueHRva2VuCiAgICB9LCB7CiAgICAgIGlkOiAtMSwKICAgICAgLy8nam9obndpY2sxMjNAZ21haWwuY29tJywKICAgICAgb25seV9kaXI6IGZhbHNlIC8vJzEyMzEyMzQnCgogICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgdmFyIGZvbGRlcnNsaXN0OwogICAgICAgIHZhciBmaWxlc2xpc3Q7CiAgICAgICAgZm9sZGVyc2xpc3QgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLmRpcnM7CiAgICAgICAgZmlsZXNsaXN0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5maWxlczsKCiAgICAgICAgZm9yICh2YXIga2V5Zm9sZGVyIGluIGZvbGRlcnNsaXN0KSB7CiAgICAgICAgICBfdGhpczIuZm9sZGVyaXRlbXMucHVzaCh7CiAgICAgICAgICAgIGdldG5hbWU6IGZvbGRlcnNsaXN0W2tleWZvbGRlcl0ubmFtZSwKICAgICAgICAgICAgZ2V0aWQ6IGZvbGRlcnNsaXN0W2tleWZvbGRlcl0uaWQKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZm9yICh2YXIga2V5ZmlsZSBpbiBmaWxlc2xpc3QpIHsKICAgICAgICAgIF90aGlzMi5maWxlaXRlbXMucHVzaCh7CiAgICAgICAgICAgIGdldG5hbWU6IGZpbGVzbGlzdFtrZXlmaWxlXS5uYW1lCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDQwMCkgewogICAgICAgIGFsZXJ0KHJlc3BvbnNlLmRhdGEubXNnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhbGVydCgiTmV0d29yayBFcnJvciIpOwogICAgICB9CiAgICB9KTsKICB9Cn07"},{"version":3,"sources":["Filemanagement.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div ref=\"getheight\" class=\"filemanagement\">\n    <el-container style=\"width:99%; margin: 0px; padding: 0px;  border:0px;\">\n      <el-header class=\"toolview\">\n      <el-upload\n        style=\"float:left;margin-right:1%\"\n          action=\"123\"\n          :http-request=\"upload\"\n          :with-credentials=\"true\"\n          :show-file-list=\"false\">\n          <el-button type=\"primary\" style=\"width:120px;\">Upload</el-button>\n        </el-upload>\n        <el-button class=\"toolcompent\" type=\"primary\" @click=\"filedownload\" plain>Download</el-button>\n      </el-header>\n      <div>\n         <h4 style=\"text-align: left;height:0.5%;margin: 0;margin-left:0.7%\">{{current_dir_name}}</h4>\n      </div>  \n      <div class=\"typemenu\">\n        <p style=\"text-align: left;margin:0;margin-left:2.3%;width:30%;float:left;\">file name</p>\n        <p style=\"text-align: left;margin:0;width:20%;float:left;\">size</p>\n      </div>\n      <div style=\"height:2%\"></div>\n      <div ref=\"setheight\" class=\"fileviewscroll\">\n        <div v-for=\"(item,index) in folderitems\" :key=\"'folder'+index\" style=\"padding: 0px;display:block;\">\n            <folderitem :foldername=\"item.getname\" :folderid=\"item.getid\"></folderitem>\n        </div>\n        <div v-for=\"(item,index) in fileitems\" :key=\"'file'+index\">\n            <fileitem :filename=\"item.getname\"></fileitem>\n        </div>\n      </div>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport SparkMD5 from 'spark-md5';\nimport axios from 'axios';\nimport folderitem from \"./Fileitems/folderitem\";\nimport fileitem from \"./Fileitems/fileitem\";\nexport default {\n  name: 'Filemanagement',\n  data ()\n  {\n    return{\n      fileList:[{}],\n      folderitems: [],\n      fileitems: [],\n      current_dir_id: -1,\n      current_dir_name: 'All files',\n    };\n  },\n  components:\n  {\n    folderitem,\n    fileitem\n  },\n  methods:\n  {\n    flushDir(newDir)\n    {\n      this.current_dir_id = newDir.dirID;\n      this.folderitems = [];\n      this.fileitems = [];\n      this.$api.get('/api/dirstest',\n      {\n        'x-auth-token': this.Common.xtoken\n      }, \n      {\n        id: this.current_dir_id,                        //'johnwick123@gmail.com',\n        only_dir: false                       //'1231234'\n      }, response => {\n      if (response.status == 200) \n      {\n        var folderslist;\n        var fileslist;\n\n        this.current_dir_name=response.data.result_data.name+\"/\"\n        folderslist = response.data.result_data.dirs;\n        fileslist = response.data.result_data.files;\n        for (var keyfolder in folderslist)\n        {\n          this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id});\n        }\n        for (var keyfile in fileslist)\n        {\n          this.fileitems.push({getname: fileslist[keyfile].name});\n        }\n        \n      } \n      else if(response.status == 400)\n      {\n        alert(response.data.msg);\n        \n      }\n      else\n      {\n        alert(\"Network Error\");\n      }\n      });\n    },\n\n    upload(res)\n    {\n        let file = res.file;  //注意：直接上传file文件，不要用FormData对象的形式传\n        let config = {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        };\n        //从接口获取presigned url\n        var presignedUrl='https://my-bucket-glai-01.s3.us-east-2.amazonaws.com/fd1?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200418T151733Z&X-Amz-SignedHeaders=host&X-Amz-Expires=25199&X-Amz-Credential=AKIAUIHAYCXRZ3RDTMT3%2F20200418%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=396c0f30aae3feeeb18c5fc23c7699ecf42bb9b5a2cac38e150ca68793e0ae20';\n                //需要用put方法上传，post会报405，aws官方规定是put方法\n        // axios.put(presignedUrl, file, config)\n        //     .then(res1 => {\n        //         if (res1.status == 200) {\n        //           console.log(res1);\n        //         }\n        //     });\n        this.generatorFileMd5(file);\n    },\n    filedownload()\n    {\n      var link = document.createElement('a');\n      link.download='text';\n      link.href = \"https://my-bucket-glai-01.s3.us-east-2.amazonaws.com/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_3456324?response-content-disposition=attachment%3Bfilename%3Dhello-kitty.pdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200418T145706Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604799&X-Amz-Credential=AKIAUIHAYCXRZ3RDTMT3%2F20200418%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=fe1c73a27f6de9340e05fe1982e16241d56c68065a807dfda9882976fdffbdef\";\n      link.click();\n    },\n    generatorFileMd5(file) {\n      /**\n        * 生成MD5\n        */\n      let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice\n        // file = this.files[0],\n      let chunkSize = 2097152                           // Read in chunks of 2MB\n      let chunks = Math.ceil(file.size / chunkSize)\n      let currentChunk = 0\n      let spark = new SparkMD5.ArrayBuffer()\n      let fileReader = new FileReader()\n      fileReader.onload = function (e) {\n          // console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n          spark.append(e.target.result)                  // Append array buffer\n          currentChunk++;\n\n          if (currentChunk < chunks) {\n              loadNext();\n          } else {\n              // console.info('computed hash', spark.end())  // spark.end(): 文件 MD5值生成完成\n              console.log(spark.end())\n          }\n      };\n\n      fileReader.onerror = function () {\n          console.warn('fileReader.onerror is error')\n      };\n\n      function loadNext() {\n          var start = currentChunk * chunkSize,\n              end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n          fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\n      }\n\n      loadNext()\n    }\n\n  },\n  created: function () \n  {\n    this.$bus.on('updateDirID', this.flushDir);\n  },\n  mounted: function () \n  {\n    this.$refs.setheight.style.height = ((this.$refs.getheight.offsetHeight)*0.84)+'px';\n    this.$api.get('/api/dirs', \n    {\n      'x-auth-token': this.Common.xtoken\n    },\n    {\n      id: -1,                        //'johnwick123@gmail.com',\n      only_dir: false                       //'1231234'\n    }, response => {\n    if (response.status == 200) \n    {\n      var folderslist;\n      var fileslist;\n\n      folderslist = response.data.result_data.dirs;\n      fileslist = response.data.result_data.files;\n      for (var keyfolder in folderslist)\n      {\n        this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id});\n      }\n      for (var keyfile in fileslist)\n      {\n        this.fileitems.push({getname: fileslist[keyfile].name});\n      }\n      \n    } \n    else if(response.status == 400)\n    {\n      alert(response.data.msg);\n      \n    }\n    else\n    {\n      alert(\"Network Error\");\n    }\n    });\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.filemanagement\n{\n  background-color:white;\n  margin: 0px;\n  padding: 0px;\n  height:100%;\n  width:100%;\n}\n.fileview\n{\n  text-align: left;\n}\n.toolview\n{\n  padding:0.5%;\n}\n.toolcompent\n{\n  float:left;\n  width:120px;\n}\n.fileviewscroll\n{\n  overflow-x:hidden; \n  border-top:1px solid #F2F6FD;\n}\n.typemenu\n{\n\n  width:100%;\n}\n</style>\n"],"sourceRoot":"src/components/subpage"}]}