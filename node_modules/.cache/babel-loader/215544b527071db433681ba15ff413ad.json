{"remainingRequest":"/home/hobo/code/odd6871/node_modules/thread-loader/dist/cjs.js!/home/hobo/code/odd6871/node_modules/babel-loader/lib/index.js!/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue","mtime":1587601298369},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFNwYXJrTUQ1IGZyb20gJ3NwYXJrLW1kNSc7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBmb2xkZXJpdGVtIGZyb20gIi4vRmlsZWl0ZW1zL2ZvbGRlcml0ZW0iOwppbXBvcnQgZmlsZWl0ZW0gZnJvbSAiLi9GaWxlaXRlbXMvZmlsZWl0ZW0iOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0ZpbGVtYW5hZ2VtZW50JywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZmlsZUxpc3Q6IFt7fV0sCiAgICAgIGZvbGRlcml0ZW1zOiBbXSwKICAgICAgZmlsZWl0ZW1zOiBbXSwKICAgICAgY3VycmVudF9kaXJfaWQ6IC0xLAogICAgICBjdXJyZW50X2Rpcl9uYW1lOiAnQWxsIGZpbGVzJywKICAgICAgcHJlX2Rpcl9pZDogMCwKICAgICAgbmV3Zm9sZGVyc2hvdzogZmFsc2UsCiAgICAgIG5ld2ZvbGRlcm5hbWU6ICIiCiAgICB9OwogIH0sCiAgY29tcG9uZW50czogewogICAgZm9sZGVyaXRlbTogZm9sZGVyaXRlbSwKICAgIGZpbGVpdGVtOiBmaWxlaXRlbQogIH0sCiAgbWV0aG9kczogewogICAgZmx1c2hEaXI6IGZ1bmN0aW9uIGZsdXNoRGlyKG5ld0RpcikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuY3VycmVudF9kaXJfaWQgPSBuZXdEaXIuZGlySUQ7CiAgICAgIHRoaXMuZm9sZGVyaXRlbXMgPSBbXTsKICAgICAgdGhpcy5maWxlaXRlbXMgPSBbXTsKICAgICAgdGhpcy4kYXBpLmdldCgnL2FwaS9kaXJzLycgKyB0aGlzLmN1cnJlbnRfZGlyX2lkLCB7CiAgICAgICAgJ3gtYXV0aC10b2tlbic6IHRoaXMuQ29tbW9uLnh0b2tlbgogICAgICB9LCB7CiAgICAgICAgb25seV9kaXI6IGZhbHNlIC8vJzEyMzEyMzQnCgogICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgdmFyIGZvbGRlcnNsaXN0OwogICAgICAgICAgdmFyIGZpbGVzbGlzdDsKICAgICAgICAgIF90aGlzMi5wcmVfZGlyX2lkID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5wcmVfaWQ7CgogICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVzdWx0X2RhdGEucHJlX2lkID09IDApIHsKICAgICAgICAgICAgX3RoaXMyLmN1cnJlbnRfZGlyX25hbWUgPSAiQWxsIGZpbGVzIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzMi5jdXJyZW50X2Rpcl9uYW1lID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5uYW1lICsgIi8iOwogICAgICAgICAgfQoKICAgICAgICAgIGZvbGRlcnNsaXN0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5kaXJzOwogICAgICAgICAgZmlsZXNsaXN0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS5maWxlczsKCiAgICAgICAgICBmb3IgKHZhciBrZXlmb2xkZXIgaW4gZm9sZGVyc2xpc3QpIHsKICAgICAgICAgICAgX3RoaXMyLmZvbGRlcml0ZW1zLnB1c2goewogICAgICAgICAgICAgIGdldG5hbWU6IGZvbGRlcnNsaXN0W2tleWZvbGRlcl0ubmFtZSwKICAgICAgICAgICAgICBnZXRpZDogZm9sZGVyc2xpc3Rba2V5Zm9sZGVyXS5pZCwKICAgICAgICAgICAgICBnZXRwcmVpZDogX3RoaXMyLmN1cnJlbnRfZGlyX2lkLAogICAgICAgICAgICAgIGdldGRhdGU6IGZvbGRlcnNsaXN0W2tleWZvbGRlcl0uY3JlYXRlX2RhdGUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yICh2YXIga2V5ZmlsZSBpbiBmaWxlc2xpc3QpIHsKICAgICAgICAgICAgX3RoaXMyLmZpbGVpdGVtcy5wdXNoKHsKICAgICAgICAgICAgICBnZXRuYW1lOiBmaWxlc2xpc3Rba2V5ZmlsZV0ubmFtZSArICIuIiArIGZpbGVzbGlzdFtrZXlmaWxlXS5zdWZmaXhlcywKICAgICAgICAgICAgICBnZXRzaXplOiBmaWxlc2xpc3Rba2V5ZmlsZV0uc2l6ZSwKICAgICAgICAgICAgICBnZXRpZDogZmlsZXNsaXN0W2tleWZpbGVdLmlkLAogICAgICAgICAgICAgIGdldHByZWlkOiBfdGhpczIuY3VycmVudF9kaXJfaWQsCiAgICAgICAgICAgICAgZ2V0ZGF0ZTogZmlsZXNsaXN0W2tleWZpbGVdLmNyZWF0ZV9kYXRlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDQwMCkgewogICAgICAgICAgYWxlcnQocmVzcG9uc2UuZGF0YS5tc2cpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydCgiTmV0d29yayBFcnJvciIpOwogICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQocmVzKSB7CiAgICAgIHZhciBmaWxlID0gcmVzLmZpbGU7IC8v5rOo5oSP77ya55u05o6l5LiK5LygZmlsZeaWh+S7tu+8jOS4jeimgeeUqEZvcm1EYXRh5a+56LGh55qE5b2i5byP5LygCgogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMuZ2VuZXJhdG9yRmlsZU1kNShmaWxlKTsgLy/ku47mjqXlj6Pojrflj5ZwcmVzaWduZWQgdXJsCiAgICAgIC8v6ZyA6KaB55SocHV05pa55rOV5LiK5Lyg77yMcG9zdOS8muaKpTQwNe+8jGF3c+WumOaWueinhOWumuaYr3B1dOaWueazlQogICAgICAvLyBheGlvcy5wdXQocHJlc2lnbmVkVXJsLCBmaWxlLCBjb25maWcpCiAgICAgIC8vICAgICAudGhlbihyZXMxID0+IHsKICAgICAgLy8gICAgICAgICBpZiAocmVzMS5zdGF0dXMgPT0gMjAwKSB7CiAgICAgIC8vICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMxKTsKICAgICAgLy8gICAgICAgICB9CiAgICAgIC8vICAgICB9KTsKICAgIH0sCiAgICBnZW5lcmF0b3JGaWxlTWQ1OiBmdW5jdGlvbiBnZW5lcmF0b3JGaWxlTWQ1KGZpbGUpIHsKICAgICAgLyoqCiAgICAgICAgKiDnlJ/miJBNRDUKICAgICAgICAqLwogICAgICB2YXIgYmxvYlNsaWNlID0gRmlsZS5wcm90b3R5cGUuc2xpY2UgfHwgRmlsZS5wcm90b3R5cGUubW96U2xpY2UgfHwgRmlsZS5wcm90b3R5cGUud2Via2l0U2xpY2U7IC8vIGZpbGUgPSB0aGlzLmZpbGVzWzBdLAoKICAgICAgdmFyIGNodW5rU2l6ZSA9IDIwOTcxNTI7IC8vIFJlYWQgaW4gY2h1bmtzIG9mIDJNQgoKICAgICAgdmFyIGNodW5rcyA9IE1hdGguY2VpbChmaWxlLnNpemUgLyBjaHVua1NpemUpOwogICAgICB2YXIgY3VycmVudENodW5rID0gMDsKICAgICAgdmFyIHNwYXJrID0gbmV3IFNwYXJrTUQ1LkFycmF5QnVmZmVyKCk7CiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlYWQgY2h1bmsgbnInLCBjdXJyZW50Q2h1bmsgKyAxLCAnb2YnLCBjaHVua3MpCiAgICAgICAgc3BhcmsuYXBwZW5kKGUudGFyZ2V0LnJlc3VsdCk7IC8vIEFwcGVuZCBhcnJheSBidWZmZXIKCiAgICAgICAgY3VycmVudENodW5rKys7CgogICAgICAgIGlmIChjdXJyZW50Q2h1bmsgPCBjaHVua3MpIHsKICAgICAgICAgIGxvYWROZXh0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGNvbnNvbGUuaW5mbygnY29tcHV0ZWQgaGFzaCcsIHNwYXJrLmVuZCgpKSAgLy8gc3BhcmsuZW5kKCk6IOaWh+S7tiBNRDXlgLznlJ/miJDlrozmiJAKICAgICAgICAgIHZhciBtZDVjb2RlID0gc3BhcmsuZW5kKCk7CgogICAgICAgICAgX3RoaXMuJGFwaS5nZXQoJy9hcGkvdXBsb2FkJywgewogICAgICAgICAgICAneC1hdXRoLXRva2VuJzogX3RoaXMuQ29tbW9uLnh0b2tlbgogICAgICAgICAgfSwgewogICAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLAogICAgICAgICAgICBmaWxlU2l6ZTogZmlsZS5zaXplLAogICAgICAgICAgICBmaWxlTUQ1OiBtZDVjb2RlLAogICAgICAgICAgICBkaXJJZDogX3RoaXMuY3VycmVudF9kaXJfaWQKICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgIHZhciB1cGxvYWR1cmw7CiAgICAgICAgICAgICAgdmFyIHVwbG9hZGtleTsKICAgICAgICAgICAgICB1cGxvYWR1cmwgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLnVwbG9hZF91cmw7CiAgICAgICAgICAgICAgdXBsb2Fka2V5ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRfZGF0YS51cGxvYWRfa2V5OwogICAgICAgICAgICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OyAvL+S7juaOpeWPo+iOt+WPlnByZXNpZ25lZCB1cmwKICAgICAgICAgICAgICAvL+mcgOimgeeUqHB1dOaWueazleS4iuS8oO+8jHBvc3TkvJrmiqU0MDXvvIxhd3Plrpjmlrnop4TlrprmmK9wdXTmlrnms5UKCiAgICAgICAgICAgICAgYXhpb3MucHV0KHVwbG9hZHVybCwgZmlsZSwgY29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXMxKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzMS5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGUubmFtZSk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGUuc2l6ZSk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1kNWNvZGUpOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy5jdXJyZW50X2Rpcl9pZCk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVwbG9hZGtleSk7CiAgICAgICAgICAgICAgICAgIHZhciBqc29uZGF0YSA9IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICAiZmlsZV9uYW1lIjogZmlsZS5uYW1lLAogICAgICAgICAgICAgICAgICAgICJzaXplIjogZmlsZS5zaXplLAogICAgICAgICAgICAgICAgICAgICJtZDUiOiBtZDVjb2RlLAogICAgICAgICAgICAgICAgICAgICJkaXJfaWQiOiBfdGhpcy5jdXJyZW50X2Rpcl9pZCwKICAgICAgICAgICAgICAgICAgICAidXBsb2FkX2tleSI6IHVwbG9hZGtleQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbmRhdGEpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuJGh0dHAyLnBvc3QoX3RoaXMuQ29tbW9uLmJhc2V1cmwgKyAiL2FwaS91cGxvYWQiLCBqc29uZGF0YSwgewogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICd4LWF1dGgtdG9rZW4nOiBfdGhpcy5Db21tb24ueHRva2VuLAogICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJG5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2F0aW9uJywKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3MhJywKICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMDAKICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ZGlyID0gewogICAgICAgICAgICAgICAgICAgICAgICBkaXJJRDogX3RoaXMuY3VycmVudF9kaXJfaWQKICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmx1c2hEaXIobmV4dGRpcik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5yZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGFsZXJ0KCJFcnJvciIpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUud2FybignZmlsZVJlYWRlci5vbmVycm9yIGlzIGVycm9yJyk7CiAgICAgIH07CgogICAgICBmdW5jdGlvbiBsb2FkTmV4dCgpIHsKICAgICAgICB2YXIgc3RhcnQgPSBjdXJyZW50Q2h1bmsgKiBjaHVua1NpemUsCiAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgY2h1bmtTaXplID49IGZpbGUuc2l6ZSA/IGZpbGUuc2l6ZSA6IHN0YXJ0ICsgY2h1bmtTaXplOwogICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYlNsaWNlLmNhbGwoZmlsZSwgc3RhcnQsIGVuZCkpOwogICAgICB9CgogICAgICBsb2FkTmV4dCgpOwogICAgfSwKICAgIGNyZWF0ZWZvbGRlcjogZnVuY3Rpb24gY3JlYXRlZm9sZGVyKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMuJGh0dHAyLnB1dCh0aGlzLkNvbW1vbi5iYXNldXJsICsgIi9hcGkvZGlycy8iLCB7CiAgICAgICAgIm5hbWUiOiB0aGlzLm5ld2ZvbGRlcm5hbWUsCiAgICAgICAgInBhcmVudF9pZCI6IHRoaXMuY3VycmVudF9kaXJfaWQKICAgICAgfSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICd4LWF1dGgtdG9rZW4nOiB0aGlzLkNvbW1vbi54dG9rZW4KICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgIF90aGlzMy4kbm90aWZ5KHsKICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYXRpb24nLAogICAgICAgICAgICBtZXNzYWdlOiAnU3VjY2VzcyEnLAogICAgICAgICAgICBkdXJhdGlvbjogMzAwMAogICAgICAgICAgfSk7CgogICAgICAgICAgdmFyIG5leHRkaXIgPSB7CiAgICAgICAgICAgIGRpcklEOiBfdGhpczMuY3VycmVudF9kaXJfaWQKICAgICAgICAgIH07CgogICAgICAgICAgX3RoaXMzLmZsdXNoRGlyKG5leHRkaXIpOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgYWxlcnQoIkVycm9yOiAiICsgZXJyb3IucmVzcG9uc2UuZGF0YS5tc2cpOwogICAgICB9KTsKICAgICAgdGhpcy5uZXdmb2xkZXJzaG93ID0gZmFsc2U7CiAgICB9LAogICAgYmFja3ByZWRpcjogZnVuY3Rpb24gYmFja3ByZWRpcigpIHsKICAgICAgdmFyIG5leHRkaXIgPSB7CiAgICAgICAgZGlySUQ6IHRoaXMucHJlX2Rpcl9pZAogICAgICB9OwoKICAgICAgaWYgKHRoaXMucHJlX2Rpcl9pZCAhPSAwKSB7CiAgICAgICAgdGhpcy5mbHVzaERpcihuZXh0ZGlyKTsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuJGJ1cy5vbigndXBkYXRlRGlySUQnLCB0aGlzLmZsdXNoRGlyKTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICB0aGlzLiRyZWZzLnNldGhlaWdodC5zdHlsZS5oZWlnaHQgPSB0aGlzLiRyZWZzLmdldGhlaWdodC5vZmZzZXRIZWlnaHQgKiAwLjg0ICsgJ3B4JzsKICAgIHRoaXMuJGFwaS5nZXQoJy9hcGkvZGlycycsIHsKICAgICAgJ3gtYXV0aC10b2tlbic6IHRoaXMuQ29tbW9uLnh0b2tlbgogICAgfSwgewogICAgICAvLydqb2hud2ljazEyM0BnbWFpbC5jb20nLAogICAgICBvbmx5X2RpcjogZmFsc2UgLy8nMTIzMTIzNCcKCiAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICB2YXIgZm9sZGVyc2xpc3Q7CiAgICAgICAgdmFyIGZpbGVzbGlzdDsKICAgICAgICBfdGhpczQuY3VycmVudF9kaXJfaWQgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLmN1cnJfaWQ7CiAgICAgICAgX3RoaXM0LnByZV9kaXJfaWQgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLnByZV9pZDsKICAgICAgICBmb2xkZXJzbGlzdCA9IHJlc3BvbnNlLmRhdGEucmVzdWx0X2RhdGEuZGlyczsKICAgICAgICBmaWxlc2xpc3QgPSByZXNwb25zZS5kYXRhLnJlc3VsdF9kYXRhLmZpbGVzOwoKICAgICAgICBmb3IgKHZhciBrZXlmb2xkZXIgaW4gZm9sZGVyc2xpc3QpIHsKICAgICAgICAgIF90aGlzNC5mb2xkZXJpdGVtcy5wdXNoKHsKICAgICAgICAgICAgZ2V0bmFtZTogZm9sZGVyc2xpc3Rba2V5Zm9sZGVyXS5uYW1lLAogICAgICAgICAgICBnZXRpZDogZm9sZGVyc2xpc3Rba2V5Zm9sZGVyXS5pZCwKICAgICAgICAgICAgZ2V0cHJlaWQ6IF90aGlzNC5jdXJyZW50X2Rpcl9pZCwKICAgICAgICAgICAgZ2V0ZGF0ZTogZm9sZGVyc2xpc3Rba2V5Zm9sZGVyXS5jcmVhdGVfZGF0ZQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBrZXlmaWxlIGluIGZpbGVzbGlzdCkgewogICAgICAgICAgX3RoaXM0LmZpbGVpdGVtcy5wdXNoKHsKICAgICAgICAgICAgZ2V0bmFtZTogZmlsZXNsaXN0W2tleWZpbGVdLm5hbWUgKyAiLiIgKyBmaWxlc2xpc3Rba2V5ZmlsZV0uc3VmZml4ZXMsCiAgICAgICAgICAgIGdldHNpemU6IGZpbGVzbGlzdFtrZXlmaWxlXS5zaXplLAogICAgICAgICAgICBnZXRpZDogZmlsZXNsaXN0W2tleWZpbGVdLmlkLAogICAgICAgICAgICBnZXRwcmVpZDogX3RoaXM0LmN1cnJlbnRfZGlyX2lkLAogICAgICAgICAgICBnZXRkYXRlOiBmaWxlc2xpc3Rba2V5ZmlsZV0uY3JlYXRlX2RhdGUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gNDAwKSB7CiAgICAgICAgYWxlcnQocmVzcG9uc2UuZGF0YS5tc2cpOwogICAgICB9IGVsc2UgewogICAgICAgIGFsZXJ0KCJOZXR3b3JrIEVycm9yIik7CiAgICAgIH0KICAgIH0pOwogIH0KfTs="},{"version":3,"sources":["Filemanagement.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div ref=\"getheight\" class=\"filemanagement\">\n    <el-container style=\"width:99%; margin: 0px; padding: 0px;  border:0px;\">\n      <el-header class=\"toolview\">\n      <el-upload\n        style=\"float:left;margin-right:1%\"\n          action=\"123\"\n          :http-request=\"upload\"\n          :with-credentials=\"true\"\n          :show-file-list=\"false\">\n          <el-button type=\"primary\" style=\"width:120px;\">Upload</el-button>\n        </el-upload>\n        <el-popover\n          placement=\"top\"\n          width=\"400\"\n          v-model=\"newfoldershow\">\n          <div>\n            <el-input v-model=\"newfoldername\" style=\"float:left;width:85%\"></el-input> \n            <el-button style=\"float:left;margin-left:3%\" type=\"primary\" icon=\"el-icon-check\" circle plain @click=\"createfolder\"></el-button>\n          </div>\n          <el-button slot=\"reference\" class=\"toolcompent\" type=\"primary\" plain>New Folder</el-button>\n        </el-popover>\n      </el-header>\n      <div style=\"margin-left:1%;\">\n        <p class=\"dirback\" style=\"float:left;font-size:1em;color:#409EFF;\" type=\"text\" @click=\"backpredir\">Back </p>\n         <p style=\"float: left;font-size:1em;margin-left:0.5%;\"> | {{current_dir_name}}</p>\n      </div>  \n      <div class=\"typemenu\">\n        <p style=\"text-align: left;margin:0;margin-left:2.3%;width:30%;float:left;\">file name</p>\n        <p style=\"text-align: left;margin:0;width:20%;float:left;\">size</p>\n        <p style=\"text-align: left;margin:0;width:20%;float:left;\">created date</p>\n      </div>\n      <div style=\"height:2%\"></div>\n      <div ref=\"setheight\" class=\"fileviewscroll\">\n        <div v-for=\"(item,index) in folderitems\" :key=\"'folder'+index\" style=\"padding: 0px;display:block;\">\n            <folderitem :foldername=\"item.getname\" :folderid=\"item.getid\" :folderpreid=\"item.getpreid\" :createddate=\"item.getdate\"></folderitem>\n        </div>\n        <div v-for=\"(item,index) in fileitems\" :key=\"'file'+index\">\n            <fileitem :filename=\"item.getname\" :filesize=\"item.getsize\" :fileid=\"item.getid\" :dirpreid=\"item.getpreid\" :createddate=\"item.getdate\"></fileitem>\n        </div>\n      </div>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport SparkMD5 from 'spark-md5';\nimport axios from 'axios';\nimport folderitem from \"./Fileitems/folderitem\";\nimport fileitem from \"./Fileitems/fileitem\";\nexport default {\n  name: 'Filemanagement',\n  data ()\n  {\n    return{\n      fileList:[{}],\n      folderitems: [],\n      fileitems: [],\n      current_dir_id: -1,\n      current_dir_name: 'All files',\n      pre_dir_id: 0,\n      newfoldershow: false,\n      newfoldername:\"\",\n    };\n  },\n  components:\n  {\n    folderitem,\n    fileitem\n  },\n  methods:\n  {\n    flushDir(newDir)\n    {\n      this.current_dir_id = newDir.dirID;\n      this.folderitems = [];\n      this.fileitems = [];\n      this.$api.get('/api/dirs/'+this.current_dir_id,\n      {\n        'x-auth-token': this.Common.xtoken\n      }, \n      {\n        only_dir: false                       //'1231234'\n      }, response => {\n      if (response.status == 200) \n      {\n        var folderslist;\n        var fileslist;\n        this.pre_dir_id=response.data.result_data.pre_id;\n        if(response.data.result_data.pre_id == 0)\n        {\n          this.current_dir_name=\"All files\"\n        }\n        else\n        {\n          this.current_dir_name=response.data.result_data.name+\"/\"\n        }\n        folderslist = response.data.result_data.dirs;\n        fileslist = response.data.result_data.files;\n        for (var keyfolder in folderslist)\n        {\n          this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id, getpreid: this.current_dir_id, getdate: folderslist[keyfolder].create_date});\n        }\n        for (var keyfile in fileslist)\n        {\n          this.fileitems.push({getname: fileslist[keyfile].name+\".\"+fileslist[keyfile].suffixes, getsize: fileslist[keyfile].size, getid: fileslist[keyfile].id, getpreid: this.current_dir_id,getdate:fileslist[keyfile].create_date});\n        }\n        \n      } \n      else if(response.status == 400)\n      {\n        alert(response.data.msg);\n        \n      }\n      else\n      {\n        alert(\"Network Error\");\n        console.log(response);\n      }\n      });\n    },\n\n    upload(res)\n    {\n      let file = res.file;  //注意：直接上传file文件，不要用FormData对象的形式传\n      let config = {\n          headers: {\n              'Content-Type': 'multipart/form-data'\n          }\n      };\n      this.generatorFileMd5(file);\n\n      //从接口获取presigned url\n              //需要用put方法上传，post会报405，aws官方规定是put方法\n      // axios.put(presignedUrl, file, config)\n      //     .then(res1 => {\n      //         if (res1.status == 200) {\n      //           console.log(res1);\n      //         }\n      //     });\n    },\n    generatorFileMd5(file) {\n      /**\n        * 生成MD5\n        */\n      let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice\n        // file = this.files[0],\n      let chunkSize = 2097152                           // Read in chunks of 2MB\n      let chunks = Math.ceil(file.size / chunkSize)\n      let currentChunk = 0\n      let spark = new SparkMD5.ArrayBuffer()\n      let fileReader = new FileReader()\n      const _this=this;\n      fileReader.onload = function (e) {\n          // console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n          spark.append(e.target.result)                  // Append array buffer\n          currentChunk++;\n\n          if (currentChunk < chunks) {\n              loadNext();\n          } else {\n              // console.info('computed hash', spark.end())  // spark.end(): 文件 MD5值生成完成\n              var md5code=spark.end();\n              _this.$api.get('/api/upload',\n              {\n                'x-auth-token': _this.Common.xtoken\n              }, \n              {\n                fileName: file.name,\n                fileSize: file.size,\n                fileMD5: md5code,\n                dirId: _this.current_dir_id\n              }, response => {\n              if (response.status == 200) \n              {\n                var uploadurl;\n                var uploadkey;\n                uploadurl=response.data.result_data.upload_url;\n                uploadkey=response.data.result_data.upload_key;\n                let config = {headers: {'Content-Type': 'multipart/form-data'}};\n\n                  //从接口获取presigned url\n                          //需要用put方法上传，post会报405，aws官方规定是put方法\n                  axios.put(uploadurl, file, config)\n                  .then(res1 => {\n                      if (res1.status == 200) {\n                        console.log(file.name);\n                        console.log(file.size);\n                        console.log(md5code);\n                        console.log(_this.current_dir_id);\n                        console.log(uploadkey);\n                        var jsondata=JSON.stringify({\n                          \"file_name\": file.name,\n                          \"size\": file.size,\n                          \"md5\": md5code,\n                          \"dir_id\": _this.current_dir_id,\n                          \"upload_key\": uploadkey\n                        });\n                        console.log(jsondata);\n                        _this.$http2.post(_this.Common.baseurl+\"/api/upload\", \n                        jsondata, \n                        {\n                          headers: {'x-auth-token': _this.Common.xtoken, 'Content-Type': 'application/json'}\n                        })\n                        .then(response => {\n                            if (response.status == 200) {\n                              _this.$notify({title: 'Notification',message: 'Success!',duration: 3000});\n                              var nextdir={dirID: _this.current_dir_id}\n                              _this.flushDir(nextdir);\n                            }\n                        })\n                        .catch(function (error) {\n                          console.log(error.response);\n                        });\n                      }\n                  });\n              } \n              else\n              {\n                alert(\"Error\");\n                console.log(response);\n              }\n              });\n          }\n      };\n\n      fileReader.onerror = function () {\n          console.warn('fileReader.onerror is error')\n      };\n\n      function loadNext() {\n          var start = currentChunk * chunkSize,\n              end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n          fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\n      }\n      loadNext()\n    },\n    createfolder()\n    {\n      this.$http2.put(this.Common.baseurl+\"/api/dirs/\", \n      {\n        \"name\": this.newfoldername,\n        \"parent_id\": this.current_dir_id\n      }, \n      {\n        headers: {'x-auth-token': this.Common.xtoken}\n      })\n      .then(response => {\n          if (response.status == 200) {\n            this.$notify({title: 'Notification',message: 'Success!',duration: 3000});\n            var nextdir={dirID: this.current_dir_id}\n            this.flushDir(nextdir);\n          }\n      })\n      .catch(function (error) {\n        alert(\"Error: \"+error.response.data.msg);\n      });\n      this.newfoldershow=false;\n    },\n    backpredir()\n    {\n      var nextdir={dirID: this.pre_dir_id}\n      if(this.pre_dir_id != 0)\n      {\n        this.flushDir(nextdir);\n      }\n    }\n  },\n  created: function () \n  {\n    this.$bus.on('updateDirID', this.flushDir);\n  },\n  mounted: function () \n  {\n    this.$refs.setheight.style.height = ((this.$refs.getheight.offsetHeight)*0.84)+'px';\n    this.$api.get('/api/dirs', \n    {\n      'x-auth-token': this.Common.xtoken\n    },\n    {                      //'johnwick123@gmail.com',\n      only_dir: false                       //'1231234'\n    }, response => {\n    if (response.status == 200) \n    {\n      var folderslist;\n      var fileslist;\n\n      this.current_dir_id=response.data.result_data.curr_id;\n      this.pre_dir_id=response.data.result_data.pre_id;\n      folderslist = response.data.result_data.dirs;\n      fileslist = response.data.result_data.files;\n      for (var keyfolder in folderslist)\n      {\n        this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id, getpreid: this.current_dir_id,getdate: folderslist[keyfolder].create_date});\n      }\n      for (var keyfile in fileslist)\n      {\n        this.fileitems.push({getname: fileslist[keyfile].name+\".\"+fileslist[keyfile].suffixes, getsize: fileslist[keyfile].size, getid: fileslist[keyfile].id, getpreid: this.current_dir_id,getdate:fileslist[keyfile].create_date});\n      }\n      \n    } \n    else if(response.status == 400)\n    {\n      alert(response.data.msg);\n      \n    }\n    else\n    {\n      alert(\"Network Error\");\n    }\n    });\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.filemanagement\n{\n  background-color:white;\n  margin: 0px;\n  padding: 0px;\n  height:100%;\n  width:100%;\n}\n.fileview\n{\n  text-align: left;\n}\n.toolview\n{\n  padding:0.5%;\n}\n.toolcompent\n{\n  float:left;\n  width:120px;\n}\n.fileviewscroll\n{\n  overflow-x:hidden; \n  border-top:1px solid #F2F6FD;\n}\n.typemenu\n{\n\n  width:100%;\n}\n.dirback:hover\n{\n  text-decoration: underline;\n}\n</style>\n"],"sourceRoot":"src/components/subpage"}]}