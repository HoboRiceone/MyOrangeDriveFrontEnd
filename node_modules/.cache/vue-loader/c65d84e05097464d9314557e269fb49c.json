{"remainingRequest":"/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/hobo/code/odd6871/src/components/subpage/Filemanagement.vue","mtime":1587586048334},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hobo/code/odd6871/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Filemanagement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Filemanagement.vue","sourceRoot":"src/components/subpage","sourcesContent":["<template>\n  <div ref=\"getheight\" class=\"filemanagement\">\n    <el-container style=\"width:99%; margin: 0px; padding: 0px;  border:0px;\">\n      <el-header class=\"toolview\">\n      <el-upload\n        style=\"float:left;margin-right:1%\"\n          action=\"123\"\n          :http-request=\"upload\"\n          :with-credentials=\"true\"\n          :show-file-list=\"false\">\n          <el-button type=\"primary\" style=\"width:120px;\">Upload</el-button>\n        </el-upload>\n        <el-popover\n          placement=\"top\"\n          width=\"400\"\n          v-model=\"newfoldershow\">\n          <div>\n            <el-input v-model=\"newfoldername\" style=\"float:left;width:85%\"></el-input> \n            <el-button style=\"float:left;margin-left:3%\" type=\"primary\" icon=\"el-icon-check\" circle plain @click=\"createfolder\"></el-button>\n          </div>\n          <el-button slot=\"reference\" class=\"toolcompent\" type=\"primary\" plain>New Folder</el-button>\n        </el-popover>\n      </el-header>\n      <div style=\"margin-left:1%;\">\n        <p class=\"dirback\" style=\"float:left;font-size:1em;color:#409EFF;\" type=\"text\" @click=\"backpredir\">Back </p>\n         <p style=\"float: left;font-size:1em;margin-left:0.5%;\"> | {{current_dir_name}}</p>\n      </div>  \n      <div class=\"typemenu\">\n        <p style=\"text-align: left;margin:0;margin-left:2.3%;width:30%;float:left;\">file name</p>\n        <p style=\"text-align: left;margin:0;width:20%;float:left;\">size</p>\n      </div>\n      <div style=\"height:2%\"></div>\n      <div ref=\"setheight\" class=\"fileviewscroll\">\n        <div v-for=\"(item,index) in folderitems\" :key=\"'folder'+index\" style=\"padding: 0px;display:block;\">\n            <folderitem :foldername=\"item.getname\" :folderid=\"item.getid\" :folderpreid=\"item.getpreid\"></folderitem>\n        </div>\n        <div v-for=\"(item,index) in fileitems\" :key=\"'file'+index\">\n            <fileitem :filename=\"item.getname\" :filesize=\"item.getsize\" :fileid=\"item.getid\"></fileitem>\n        </div>\n      </div>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport SparkMD5 from 'spark-md5';\nimport axios from 'axios';\nimport folderitem from \"./Fileitems/folderitem\";\nimport fileitem from \"./Fileitems/fileitem\";\nexport default {\n  name: 'Filemanagement',\n  data ()\n  {\n    return{\n      fileList:[{}],\n      folderitems: [],\n      fileitems: [],\n      current_dir_id: -1,\n      current_dir_name: 'All files',\n      pre_dir_id: 0,\n      newfoldershow: false,\n      newfoldername:\"\",\n    };\n  },\n  components:\n  {\n    folderitem,\n    fileitem\n  },\n  methods:\n  {\n    flushDir(newDir)\n    {\n      this.current_dir_id = newDir.dirID;\n      this.folderitems = [];\n      this.fileitems = [];\n      this.$api.get('/api/dirs/'+this.current_dir_id,\n      {\n        'x-auth-token': this.Common.xtoken\n      }, \n      {\n        only_dir: false                       //'1231234'\n      }, response => {\n      if (response.status == 200) \n      {\n        var folderslist;\n        var fileslist;\n        this.pre_dir_id=response.data.result_data.pre_id;\n        if(response.data.result_data.pre_id == 0)\n        {\n          this.current_dir_name=\"All files\"\n        }\n        else\n        {\n          this.current_dir_name=response.data.result_data.name+\"/\"\n        }\n        folderslist = response.data.result_data.dirs;\n        fileslist = response.data.result_data.files;\n        for (var keyfolder in folderslist)\n        {\n          this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id, getpreid: this.current_dir_id});\n        }\n        for (var keyfile in fileslist)\n        {\n          this.fileitems.push({getname: fileslist[keyfile].name, getsize: fileslist[keyfile].size, getid: fileslist[keyfile].id});\n        }\n        \n      } \n      else if(response.status == 400)\n      {\n        alert(response.data.msg);\n        \n      }\n      else\n      {\n        alert(\"Network Error\");\n        console.log(response);\n      }\n      });\n    },\n\n    upload(res)\n    {\n      let file = res.file;  //注意：直接上传file文件，不要用FormData对象的形式传\n      let config = {\n          headers: {\n              'Content-Type': 'multipart/form-data'\n          }\n      };\n      this.generatorFileMd5(file);\n\n      //从接口获取presigned url\n              //需要用put方法上传，post会报405，aws官方规定是put方法\n      // axios.put(presignedUrl, file, config)\n      //     .then(res1 => {\n      //         if (res1.status == 200) {\n      //           console.log(res1);\n      //         }\n      //     });\n    },\n    filedownload()\n    {\n      var link = document.createElement('a');\n      link.download='text';\n      link.href = \"https://my-bucket-glai-01.s3.us-east-2.amazonaws.com/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_3456324?response-content-disposition=attachment%3Bfilename%3Dhello-kitty.pdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200418T145706Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604799&X-Amz-Credential=AKIAUIHAYCXRZ3RDTMT3%2F20200418%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Signature=fe1c73a27f6de9340e05fe1982e16241d56c68065a807dfda9882976fdffbdef\";\n      link.click();\n    },\n    generatorFileMd5(file) {\n      /**\n        * 生成MD5\n        */\n      let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice\n        // file = this.files[0],\n      let chunkSize = 2097152                           // Read in chunks of 2MB\n      let chunks = Math.ceil(file.size / chunkSize)\n      let currentChunk = 0\n      let spark = new SparkMD5.ArrayBuffer()\n      let fileReader = new FileReader()\n      const _this=this;\n      fileReader.onload = function (e) {\n          // console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n          spark.append(e.target.result)                  // Append array buffer\n          currentChunk++;\n\n          if (currentChunk < chunks) {\n              loadNext();\n          } else {\n              // console.info('computed hash', spark.end())  // spark.end(): 文件 MD5值生成完成\n              var md5code=spark.end();\n              _this.$api.get('/api/upload',\n              {\n                'x-auth-token': _this.Common.xtoken\n              }, \n              {\n                fileName: file.name,\n                fileSize: file.size,\n                fileMD5: md5code,\n                dirId: _this.current_dir_id\n              }, response => {\n              if (response.status == 200) \n              {\n                var uploadurl;\n                var uploadkey;\n                uploadurl=response.data.result_data.upload_url;\n                uploadkey=response.data.result_data.upload_key;\n                let config = {headers: {'Content-Type': 'multipart/form-data'}};\n\n                  //从接口获取presigned url\n                          //需要用put方法上传，post会报405，aws官方规定是put方法\n                  axios.put(uploadurl, file, config)\n                  .then(res1 => {\n                      if (res1.status == 200) {\n                        console.log(file.name);\n                        console.log(file.size);\n                        console.log(md5code);\n                        console.log(_this.current_dir_id);\n                        console.log(uploadkey);\n                        var jsondata=JSON.stringify({\n                          \"file_name\": file.name,\n                          \"size\": file.size,\n                          \"md5\": md5code,\n                          \"dir_id\": _this.current_dir_id,\n                          \"upload_key\": uploadkey\n                        });\n                        console.log(jsondata);\n                        _this.$http2.post(_this.Common.baseurl+\"/api/upload\", \n                        jsondata, \n                        {\n                          headers: {'x-auth-token': _this.Common.xtoken, 'Content-Type': 'application/json'}\n                        })\n                        .then(response => {\n                            if (response.status == 200) {\n                              _this.$notify({title: 'Notification',message: 'Success!',duration: 3000});\n                            }\n                        })\n                        .catch(function (error) {\n                          console.log(error.response);\n                        });\n                      }\n                  });\n              } \n              else\n              {\n                alert(\"Error\");\n                console.log(response);\n              }\n              });\n          }\n      };\n\n      fileReader.onerror = function () {\n          console.warn('fileReader.onerror is error')\n      };\n\n      function loadNext() {\n          var start = currentChunk * chunkSize,\n              end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n          fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\n      }\n      loadNext()\n    },\n    createfolder()\n    {\n      this.$http2.put(this.Common.baseurl+\"/api/dirs/\", \n      {\n        \"name\": this.newfoldername,\n        \"parent_id\": this.current_dir_id\n      }, \n      {\n        headers: {'x-auth-token': this.Common.xtoken}\n      })\n      .then(response => {\n          if (response.status == 200) {\n            this.$notify({title: 'Notification',message: 'Success!',duration: 3000});\n            var nextdir={dirID: this.current_dir_id}\n            this.flushDir(nextdir);\n          }\n      })\n      .catch(function (error) {\n        alert(\"Error: \"+error.response.data.msg);\n      });\n      this.newfoldershow=false;\n    },\n    backpredir()\n    {\n      var nextdir={dirID: this.pre_dir_id}\n      if(this.pre_dir_id != 0)\n      {\n        this.flushDir(nextdir);\n      }\n    }\n  },\n  created: function () \n  {\n    this.$bus.on('updateDirID', this.flushDir);\n  },\n  mounted: function () \n  {\n    this.$refs.setheight.style.height = ((this.$refs.getheight.offsetHeight)*0.84)+'px';\n    this.$api.get('/api/dirs', \n    {\n      'x-auth-token': this.Common.xtoken\n    },\n    {                      //'johnwick123@gmail.com',\n      only_dir: false                       //'1231234'\n    }, response => {\n    if (response.status == 200) \n    {\n      var folderslist;\n      var fileslist;\n\n      this.current_dir_id=response.data.result_data.curr_id;\n      this.pre_dir_id=response.data.result_data.pre_id;\n      folderslist = response.data.result_data.dirs;\n      fileslist = response.data.result_data.files;\n      for (var keyfolder in folderslist)\n      {\n        this.folderitems.push({getname: folderslist[keyfolder].name, getid: folderslist[keyfolder].id, getpreid: this.current_dir_id});\n      }\n      for (var keyfile in fileslist)\n      {\n        this.fileitems.push({getname: fileslist[keyfile].name, getsize: fileslist[keyfile].size, getid: fileslist[keyfile].id});\n      }\n      \n    } \n    else if(response.status == 400)\n    {\n      alert(response.data.msg);\n      \n    }\n    else\n    {\n      alert(\"Network Error\");\n    }\n    });\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.filemanagement\n{\n  background-color:white;\n  margin: 0px;\n  padding: 0px;\n  height:100%;\n  width:100%;\n}\n.fileview\n{\n  text-align: left;\n}\n.toolview\n{\n  padding:0.5%;\n}\n.toolcompent\n{\n  float:left;\n  width:120px;\n}\n.fileviewscroll\n{\n  overflow-x:hidden; \n  border-top:1px solid #F2F6FD;\n}\n.typemenu\n{\n\n  width:100%;\n}\n.dirback:hover\n{\n  text-decoration: underline;\n}\n</style>\n"]}]}